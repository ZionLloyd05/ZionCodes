// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZionCodes.Core.Brokers.Storages;

namespace ZionCodes.Core.Migrations
{
    [DbContext(typeof(StorageBroker))]
    [Migration("20210802160811_RemovedArticleCommentAndRemodelComments")]
    partial class RemovedArticleCommentAndRemodelComments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ZionCodes.Core.Models.Articles.Article", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Heart")
                        .HasColumnType("int");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte[]>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Categories.Category", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte[]>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Comments.Comment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ArticleId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Downvote")
                        .HasColumnType("int");

                    b.Property<byte[]>("ParentCommentId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Upvote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.ReadingNotes.ReadingNote", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Heart")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte[]>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("ReadingNotes");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Tags.Tag", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte[]>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Articles.Article", b =>
                {
                    b.HasOne("ZionCodes.Core.Models.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Comments.Comment", b =>
                {
                    b.HasOne("ZionCodes.Core.Models.Articles.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ZionCodes.Core.Models.Articles.Article", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
